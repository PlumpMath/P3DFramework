

pass Default:

    vertex:
        template default

        uniform samplerBuffer chunkDataBuffer;
        uniform sampler2D heightmap;

        uniform vec3 terrainOffset;
        uniform vec3 terrainScale;

        insert @WS_POSITION:

            vec4 chunk_data = texelFetch(chunkDataBuffer, gl_InstanceID);
            vOutput.positionWorld.xy = p3d_Vertex.xy * chunk_data.z;
            vOutput.positionWorld.xy += chunk_data.xy;
            // vOutput.positionWorld.z = 0.0;
            vOutput.texcoord = vOutput.positionWorld.xy / textureSize(heightmap, 0).xy;

            vOutput.positionWorld.z += texture(heightmap, vOutput.texcoord).x;

            vOutput.positionWorld.xyz = vOutput.positionWorld.xyz * terrainScale + terrainOffset;

            if (any(greaterThan(vOutput.texcoord, vec2(1.0 - 1.0 / 2048.0))) || any(lessThan(vOutput.texcoord, vec2(1.0 / 2048.0)))) {
                vOutput.positionWorld.z = terrainOffset.z - 500.0;
            }



    fragment:
        template default
        include "Includes/Terrain.include"

        uniform sampler2D heightmap;
        uniform sampler2D flowmap;
        uniform vec3 terrainScale;

        uniform sampler2D grassDiffuse;
        uniform sampler2D grassNormal;
        uniform sampler2D rockDiffuse;
        uniform sampler2D rockNormal;
        uniform sampler2D gravelDiffuse;
        uniform sampler2D gravelNormal;
        uniform sampler2D snowDiffuse;
        uniform sampler2D snowNormal;

        insert @MATERIAL:
            
            tangent, binormal;
            vec3 normal = compute_terrain_normal(heightmap, vOutput.texcoord, terrainScale.z * 0.50, tangent, binormal);

            float height = texture(heightmap, vOutput.texcoord).x;
            float flow = texture(flowmap, vOutput.texcoord).x;
            float slope = 1.0 - normal.z;

            vec4 grassColor = texture(grassDiffuse, vOutput.texcoord * 128.0) * 2.0;
            vec4 grassNormal = texture(grassNormal, vOutput.texcoord * 128.0)*2-1;
            
            vec4 rockColor = sample_triplanar(rockDiffuse, vOutput.positionWorld, normal, 0.0024) * 2.0;
            vec4 rockNormal = sample_triplanar(rockNormal, vOutput.positionWorld, normal, 0.0024) * 2 - 1;
            // rockNormal = - rockNormal;

            vec4 gravelColor = texture(gravelDiffuse, vOutput.texcoord * 256.0) * 6.0;
            vec4 gravelNormal = texture(gravelNormal, vOutput.texcoord * 256.0)*2-1;
            
            vec4 snowColor = texture(snowDiffuse, vOutput.texcoord * 128.0) * 22.0 * vec4(1,1.1,1.2, 1);
            vec4 snowNormal = texture(snowNormal, vOutput.texcoord * 128.0)*2-1;
            
            vec3 rockMergedNormal = mergeNormal(rockNormal.xyz, 0.4, normal, tangent, binormal);

            float grass = 0.0;
            float rock = 0.0;
            float gravel = 0.0;
            float snow = 0.0;

            rock = saturate( (pow(slope, 1.2) * 17.0 - 0.01) * 1.5);
            // rock = 1.0;

            snow = pow( 1.0 * saturate(height-0.11) , 1.0) * 2.0;
            snow -= 0.5;
            snow *= saturate(pow(saturate(1.0 - slope), 5.0)) * 1.7;
            snow *= 5.5;
            // snow *= pow( saturate(0.1 + flow*5.0), 4.0) * 1.0;
            snow -= 1.5;
            // snow *= 2.0;
            snow = saturate(snow);
            // snow = 0;

            gravel = saturate(pow(flow, 2.0) * 12.0 - 0.3);
            gravel = saturate(gravel-snow);
            gravel = 0;

            rock = saturate(rock-gravel);
            rock = saturate(rock-snow);
            // rock *= step(snow, saturate(rockMergedNormal.z) );
            rock = saturate(rock);
            // rock = 1;
            gravel = 0;
            // snow = 0;
            // snow = step(rock, snow);

            // rock = step(snow, rock);

            grass = 1.0 - saturate(gravel + snow + rock);

            // grass = 1.0 - step(grass, rock);
            // rock = 0;
            // rock = 0;
            // grass = 0;
            // snow = 0;

            vec3 terrainColor = vec3(0);
            vec3 terrainNormal = vec3(0);

            terrainColor += grass * grassColor.xyz;
            terrainColor += rock * rockColor.xyz;
            terrainColor += gravel * gravelColor.xyz;
            terrainColor += snow * snowColor.xyz;

            // terrainColor = pow(terrainColor, vec3(2.2));

            terrainNormal += grass * mix(vec3(0, 0, 1), grassNormal.xyz, 0.0);
            terrainNormal += rock * rockNormal.xyz;
            terrainNormal += gravel * gravelNormal.xyz;
            terrainNormal += snow * mix(vec3(0,0,1), rockNormal.xyz, 0.3);

            terrainColor = pow(terrainColor, vec3(1.4));

            terrainColor = pow(texture(flowmap, vOutput.texcoord).xyz, vec3(4)) * 3.0;

            m.normal = mergeNormal(terrainNormal, 0.1 * 0, normal, tangent, binormal);
            m.normal = terrainNormal;
            m.baseColor = terrainColor;
            m.specular = 0.02;
            m.roughness = 0.8;
            m.metallic = 0.0;




            // m.baseColor = vec3(vOutput.texcoord, 0);