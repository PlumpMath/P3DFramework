Vertex:
    template: default
    inout:
        - uniform samplerBuffer chunkDataBuffer;
        - uniform sampler2D heightmap;
        - uniform vec3 terrainOffset;
        - uniform vec3 terrainScale;
    inject:
        vertex:
            vec4 chunk_data = texelFetch(chunkDataBuffer, gl_InstanceID);
            vOutput.position.xy = p3d_Vertex.xy * chunk_data.z;
            vOutput.position.xy += chunk_data.xy;
            vOutput.position.z = 0.0;
            vOutput.texcoord = vOutput.position.xy / textureSize(heightmap, 0).xy;
            vOutput.position.z += texture(heightmap, vOutput.texcoord).x;
            vOutput.position.xyz = vOutput.position.xyz * terrainScale + terrainOffset;
            vOutput.last_proj_position = lastViewProjMatNoJitter * vec4(vOutput.position, 1);
            if (any(greaterThan(vOutput.texcoord, vec2(1.0 - 1.0 / 2048.0))) || any(lessThan(vOutput.texcoord, vec2(1.0 / 2048.0)))){
                vOutput.position.z = terrainOffset.z - 500.0;
            }

Fragment.GBuffer:
    template: default
    dependencies:
        - Data/Effects/Terrain.inc.glsl
    inout:
        - uniform sampler2D heightmap;
        - uniform sampler2D flowmap;
        - uniform vec3 terrainScale;
        - uniform sampler2D grassDiffuse;
        - uniform sampler2D grassNormal;
        - uniform sampler2D rockDiffuse;
        - uniform sampler2D rockNormal;
        - uniform sampler2D gravelDiffuse;
        - uniform sampler2D gravelNormal;
        - uniform sampler2D snowDiffuse;
        - uniform sampler2D snowNormal;
    inject:
        material:
            vec3 tangent, binormal;
            vec3 normal = compute_terrain_normal(heightmap, vOutput.texcoord, terrainScale.z * 0.50, tangent, binormal);
            float height = texture(heightmap, vOutput.texcoord).x;
            float flow = texture(flowmap, vOutput.texcoord).x;
            float slope = 1.0 - normal.z;
            //vec4 grassColor = texture(grassDiffuse, vOutput.texcoord * 32.0) * 2.0;
            //vec4 grassNormal = texture(grassNormal, vOutput.texcoord * 32.0)*2-1;
            vec4 grassColor = texture(grassDiffuse, vOutput.texcoord * 128.0) * 2.0;
            vec4 grassNormal = texture(grassNormal, vOutput.texcoord * 128.0)*2-1;
            //vec4 rockColor = texture(rockDiffuse, vOutput.texcoord * 45.0) * 2.0;
            //vec4 rockNormal = texture(rockNormal, vOutput.texcoord * 64.0)*2-1;
            vec4 rockColor = texture(rockDiffuse, vOutput.texcoord * 64.0) * 2.0;
            vec4 rockNormal = texture(rockNormal, vOutput.texcoord * 64.0)*2-1;
            vec4 gravelColor = texture(gravelDiffuse, vOutput.texcoord * 128.0) * 6.0;
            vec4 gravelNormal = texture(gravelNormal, vOutput.texcoord * 128.0)*2-1;
            vec4 snowColor = texture(snowDiffuse, vOutput.texcoord * 128.0) * 15.0 * vec4(1,1.1,1.2, 1);
            vec4 snowNormal = texture(snowNormal, vOutput.texcoord * 128.0)*2-1;
            float grass = 0.0;
            float rock = 0.0;
            float gravel = 0.0;
            float snow = 0.0;
            rock = saturate( (pow(slope, 2.0) * 12.0 - 0.16) * 1.5);
            snow = pow( 1.0 * saturate(height-0.4) , 1.0);
            snow *= saturate(pow(saturate(1.1 - slope), 4.0)) * 17.0;
            snow *= pow( saturate(0.02+flow*0.2), 1.0) * 15.0;
            snow -= 0.3;
            snow *= 1.0;
            snow = saturate(snow);

            gravel = saturate(pow(flow, 2.0) * 12.0 - 0.3);
            gravel = saturate(gravel-snow);
            // gravel = 0;

            rock = saturate(rock-gravel);
            // rock = saturate(rock-snow);
            // rock = step(snow, rock);

            grass = 1.0 - saturate(rock + gravel + snow);

            vec3 terrainColor = vec3(0);
            vec3 terrainNormal = vec3(0);

            terrainColor += grass * grassColor.xyz;
            terrainColor += rock * rockColor.xyz;
            terrainColor += gravel * gravelColor.xyz;
            terrainColor += snow * snowColor.xyz;

            terrainNormal += grass * grassNormal.xyz * 0.1;
            terrainNormal += rock * rockNormal.xyz * 0.1;
            terrainNormal += gravel * gravelNormal.xyz * 0.1;
            terrainNormal += snow * snowNormal.xyz * 0.01;

            terrainNormal = normalize(terrainNormal);

            terrainColor = pow(terrainColor, vec3(1.4));

            //m.normal = mergeNormal(terrainNormal, 0.3, normal, tangent, binormal);
            m.normal = terrain_apply_normal_map(normal, terrainNormal, 0.3, tangent, binormal);
            //m.normal = terrainNormal;
            m.basecolor = terrainColor;
            m.specular = 0.03;
            m.roughness = 0.5;
            m.metallic = 0.0;

Fragment.Shadows:
    template: default

Fragment.Voxelize:
    template: default
